package base;

import java.io.IOException;
import database.DatabaseServer;
import net.jxta.discovery.DiscoveryService;
import net.jxta.peergroup.PeerGroup;
import net.jxta.pipe.InputPipe;
import net.jxta.pipe.OutputPipe;
import net.jxta.pipe.PipeService;
import net.jxta.platform.NetworkConfigurator;
import net.jxta.platform.NetworkManager;
import net.jxta.protocol.PipeAdvertisement;

/**
 * Stores the the configuration, and all needed variables
 *   
 * @author Torsten Burschka
 */

public class Configuration {

	/**
	 * Project name
	 */
	public static String project = "MarsMissionII";
	
	/**
	 * Profile 
	 */
	public static String profileName = "Node";
	
	/**
	 * Node principal
	 */
	public static String principal = profileName;
	
	/**
	 * Node password
	 */
	public static String password = "mars2007";
	
	public static String rendezvousFile = "rdv.lst";
	
	public static String relayFile = "rly.lst";
	
	public static String globalPath = "";
	
	public static String profilePath = "";
	
	/**
	 * PeerGroup
	 */
	public static PeerGroup netPeerGroup = null;

	/**
	 * Stores the configuration
	 */
	public static NetworkConfigurator configuration = null;

	/**
	 * Pipe Advertisement
	 */
	public static PipeAdvertisement pipeAdv = null;
	
	/**
	 * Pipe Service
	 */
	public static PipeService pipeServ = null;
	
	/**
	 * Discovery Service
	 */
	public DiscoveryService discServ = null;
	
	/**
	 * NetworkManager
	 */
	public static NetworkManager manager; 
	
	/**
	 * Input pipe
	 */
	public static InputPipe inputPipe = null;
	
	/**
	 * Output pipe
	 */
	public static OutputPipe outputPipe = null;

	/**
	 * Message container for outgoing messages
	 */
	public static net.jxta.endpoint.Message message_out = null;

	/**
	 * Time to wait for a rendezvous connection in msec
	 */
	public static long waitTime = 10000;	
	
	public Configuration (String profile) {
		profileName = profile;
		System.setProperty("JXTA_HOME","."+project+"_"+profileName);
		configuration = new NetworkConfigurator();
		setProjectPath();
		setGlobalPath();
		if (!configuration.exists()) {
			createConfig();
		} else {
			System.out.println(profileName+": Configuration found.");
			RendezvousList.addHostAdresses();
		}
		System.out.println("create connection to message database.");
		DatabaseServer.createDatabase();
	}
	
	private void createConfig() {
		// Create a new configuration with a new name, principal, and pass
		System.out.println("\n"+profileName+": No configuration found. Autogenerate a new configuration.");
		configuration.setName(profileName);
		configuration.setPrincipal(profileName);
		configuration.setPassword(password);
		configuration.setDescription("Autogenerated Platform Config Advertisement.");
		configuration.setTcpEnabled(true);
		configuration.setTcpIncoming(true);
		configuration.setTcpOutgoing(true);
		configuration.setHttpEnabled(false);
		configuration.setHttpIncoming(false);
		configuration.setHttpOutgoing(false);
		configuration.setUseMulticast(false);
		configuration.setUseOnlyRendezvousSeeds(true);
		configuration.addRdvSeedingURI(Utilities.toURI(Configuration.getProjectPath()+rendezvousFile));
		configuration.setTcpPort(9702);
		configuration.setTcpEndPort(9702);
		configuration.setTcpStartPort(9702);
		configuration.setUseOnlyRelaySeeds(false);
		configuration.setMode(NetworkConfigurator.TCP_CLIENT
				+ NetworkConfigurator.TCP_SERVER);
		try {
			// persist it
			configuration.save();

		} catch (IOException ioe) {
			System.err.println("\n"+profileName+": Could not save the configuration!");
			System.err.println("\n"+profileName+": Error Message:");
			ioe.printStackTrace();
			System.err.println();
		}
		RendezvousList.addHostAdresses();
	}
	
	public void setAsRendezvous() {
		System.out.println("\n"+profileName+":Set configuration to rendezvous server.");
		configuration.setHttpEnabled(true);
	    configuration.setHttpIncoming(true);
	    configuration.setHttpOutgoing(true);
	    configuration.setHttpPort(9700);
	    configuration.setTcpEnabled(true);
	    configuration.setTcpIncoming(true);
	    configuration.setTcpOutgoing(true);
	    configuration.setUseMulticast(false);
	    configuration.setTcpPort(9701);
	    configuration.setUseOnlyRendezvousSeeds(false);
	    configuration.setUseOnlyRelaySeeds(false);
	    configuration.setTcpEndPort(9701);
	    configuration.setTcpStartPort(9701);
	    configuration.addRdvSeedingURI(Utilities.toURI(Configuration.getProjectPath()+rendezvousFile));
	    configuration.addRelaySeedingURI(Utilities.toURI(Configuration.getProjectPath()+rendezvousFile));
	    configuration.setMode(NetworkConfigurator.RDV_SERVER
	        +NetworkConfigurator.TCP_SERVER+NetworkConfigurator.TCP_CLIENT
	        +NetworkConfigurator.RELAY_SERVER+NetworkConfigurator.HTTP_SERVER
	        +NetworkConfigurator.HTTP_CLIENT);
		try {
			// persist it
			configuration.save();

		} catch (IOException ioe) {
			System.err.println("\n"+profileName+": Could not save the configuration!");
			System.err.println("\n"+profileName+": Error Message:");
			ioe.printStackTrace();
			System.err.println();
		}
	}
	
	private void setProjectPath() {
		profilePath = System.getProperty("JXTA_HOME") + "\\";
	}
	
	private void setGlobalPath() {
		globalPath = System.getProperty("JXTA_HOME").replaceAll("\\"+"."+project+"_"+profileName,"");
	}

	public static String getGlobalPath() {
		return globalPath;
	}

	public static String getProjectPath() {
		return profilePath;
	}
}